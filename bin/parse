#! /usr/bin/env python


from libnmap.process import NmapProcess
from libnmap.parser import NmapParser
from datetime import datetime, timedelta

import sys
import logging
import ConfigParser

logging.basicConfig(filename='/opt/sysman/var/log/parse.log',format='%(asctime)s:%(levelname)s:%(message)s',level=logging.DEBUG)
config = ConfigParser.ConfigParser()
config.read('/opt/sysman/etc/sysman.ini')

logging.basicConfig(filename='/opt/discovery/var/log/discovery.log',format='%(asctime)s:%(levelname)s:%(message)s',level=logging.DEBUG)

if len(sys.argv) > 1:
    XML = sys.argv[1]
else:
    logging.info("argv[1] not valid")
    exit(1)


# ############# prepare database ####################
engine = create_engine('mysql://discovery:discovery@localhost/discovery')
Base = declarative_base()
class Host(Base):
    pass

    __tablename__ = 'hosts'

    id = Column(Integer,primary_key=True)
    host = Column(String(40))
    ip = Column(String(24))
    mac = Column(String(32))
    vendor = Column(String(64))
    active = Column(Boolean,default=False)
    host_up = Column(Boolean,default=False)
    retired = Column(Boolean,default=False)
    discovering = Column(Boolean)
    ansiblefacts = Column(Text)
    community_String = Column(String(24))
    snmp_version = Column(String(24))
    ssh_enabled = Column(Boolean,default=False)
    telnet_enabled = Column(Boolean,default=False)
    nrpe_enabled = Column(Boolean,default=False)
    os_found = Column(Text)
    date_first_discovered = Column(DateTime,default=datetime.utcnow)
    date_verified = Column(DateTime)
    date_retired = Column(DateTime)
    date_last_discovered = Column(DateTime)
    source = Column(String(120))
    def __repr__(self):
        return "Host: %s, ip: %s, mac: %s" % (self.host, self.ip, self.mac)

Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)
session = Session()

# ####### process nmap report ########
rep = NmapParser.parse_fromfile(XML)
# for each host
for host in rep.hosts:
    # is host ip in database?
    test_ip = session.query(Host).filter_by(ip = host.address).first()
    # host is not in database
    if not test_ip:
        logging.debug("Host not in database: " + host.address)
        # discovered host is up
        if host.is_up():
            logging.debug("Host is up:" + host.address)
            # nmap may not return hostname
            if len(host.hostnames) > 0:
                temphost = host.hostnames[0]
            else:
                temphost = None
                logging.debug("Host has no hostname:" + host.address)
            # get shost, telnet, nrpe status ( if standard ports are used)
            sshactive = False
            telnetactive = False
            nrpeactive = False
            osfound = ""
            for s in host.services:
                if s.port == 22:
                    sshactive = True
                if s.port == 23:
                    telnetactive = True
                if s.port == 5666:
                    nrpeactive = True
                # get OS
            if host.os_fingerprinted:
                if len(host.os.osmatches) > 0:
                    osfound = host.os.osmatches[0].name

            new_host = Host(host=temphost,
                            ip = host.address,
                            mac = host.mac,
                            vendor = host.vendor,
                            discovering = True,
                            host_up = True,
                            ssh_enabled = sshactive,
                            telnet_enabled = telnetactive,
                            nrpe_enabled = nrpeactive,
                            os_found = osfound,
                            source = sys.argv[1]
                            )
            logging.info('Adding new host:' + host.address)
            session.add(new_host)
            session.commit()
        # discovered host is down
        else:
            logging.debug("Host is down:" + host.address)
            # don't pollute db with undiscovered hosts
            pass
    # host in database
    else:

        if test_ip.host_up:
            logging.debug("host is up in DB, down in discovery:" + host.address)
            rslt = update(Host).where(Host.ip == host.address).values(host_up = False)

        else:
            logging.debug("No change in status for host:" + host.address)
            pass
